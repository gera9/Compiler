from utils import Utils


class Lexic(object):
    states_table = [
        [1, 6, 210, 6, 8, 209, 14, 207, 208, 211,
            212, 16, 21, 17, 19, 20, 23, 234, 25, 27, 28, 29, 30, 232, 233],  # 0
        [1, 200, 2, 4, 200, 200, 200, 200, 200,
            200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],  # 1
        [3, 300, 300, 300, 300, 300, 300, 300, 300,
            300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300],  # 2
        [3, 201, 201, 4, 201, 201, 201, 201, 201,
            201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],  # 3
        [5, 301, 301, 301, 301, 301, 301, 301, 301,
            301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301],  # 4
        [5, 202, 202, 202, 202, 202, 202, 202, 202,
            202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202],  # 5
        [7, 7, 203, 7, 203, 203, 203, 203, 203,
            203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],  # 6
        [7, 7, 203, 7, 203, 203, 203, 203, 203,
            203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],  # 7
        [210, 210, 210, 210, 9, 12, 210, 210, 210,
            210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210],  # 8
        [10, 10, 302, 10, 11, 302, 302, 302, 302,
            302, 302, 302, 302, 302, 302, 302, 302, 10, 302, 302, 302, 302, 302, 302, 302],  # 9
        [10, 10, 303, 10, 11, 303, 303, 303, 303, 303,
            303, 303, 303, 303, 303, 303, 303, 10, 303, 303, 303, 303, 303, 303, 303],  # 10
        [304, 304, 304, 304, 204, 304, 304, 304, 304,
            304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304],  # 11
        [13, 13, 205, 13, 205, 205, 205, 205, 205,
            205, 205, 205, 205, 205, 205, 205, 205, 13, 205, 205, 205, 205, 205, 205, 205],  # 12
        [13, 13, 205, 13, 205, 205, 205, 205, 205,
            205, 205, 205, 205, 205, 205, 205, 205, 13, 205, 205, 205, 205, 205, 205, 205],  # 13
        [15, 15, 305, 15, 305, 305, 206, 305, 305,
            305, 305, 305, 305, 305, 305, 305, 305, 15, 305, 305, 305, 305, 305, 305, 305],  # 14
        [15, 15, 306, 15, 306, 306, 206, 306, 306,
            306, 306, 306, 306, 306, 306, 306, 306, 15, 306, 306, 306, 306, 306, 306, 306],  # 15
        [213, 213, 213, 213, 213, 213, 213, 213, 213,
            213, 213, 215, 214, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213],  # 16
        [216, 216, 216, 216, 216, 216, 216, 216,
            216, 216, 216, 216, 18, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216],  # 17
        [307, 307, 307, 307, 307, 307, 307, 307, 307,
            307, 307, 307, 217, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307],  # 18
        [308, 308, 308, 308, 308, 308, 308, 308, 308,
            308, 308, 308, 308, 308, 218, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308],  # 19
        [309, 309, 309, 309, 309, 309, 309, 309, 309,
            309, 309, 309, 309, 309, 309, 219, 309, 309, 309, 309, 309, 309, 309, 309, 309],  # 20
        [220, 220, 220, 220, 220, 220, 220, 220,
            220, 220, 220, 22, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220],  # 21
        [310, 310, 310, 310, 310, 310, 310, 310, 310,
            310, 310, 310, 221, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310],  # 22
        [311, 311, 311, 311, 311, 311, 311, 311, 311,
            311, 311, 24, 311, 311, 311, 311, 222, 311, 311, 311, 311, 311, 311, 311, 311],  # 23
        [312, 312, 312, 312, 312, 312, 312, 312, 312,
            312, 312, 312, 223, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312],  # 24
        [313, 313, 313, 313, 313, 313, 313, 313, 313,
         313, 313, 26, 313, 313, 313, 313, 313, 313, 224, 313, 313, 313, 313, 313, 313],  # 25
        [314, 314, 314, 314, 314, 314, 314, 314, 314,
            314, 314, 314, 225, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314],  # 26
        [226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
            226, 226, 226, 226, 226, 226, 226, 226, 227, 226, 226, 226, 226, 226],  # 27
        [228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
            228, 228, 228, 228, 228, 228, 228, 228, 228, 229, 228, 228, 228, 228],  # 28
        [315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
            315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 230, 315, 315, 315],  # 29
        [316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
            316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 231],  # 30
    ]

    error_states = {
        300: 'Error: ≠ digito',
        301: 'Error: ≠ digito',
        302: 'Error: ≠ digito ≠ letra ≠ espacio',
        303: 'Error: ≠ digito ≠ letra ≠ espacio',
        304: 'Error: ≠ /',
        305: 'Error: ≠ digito ≠ letra ≠ espacio ≠ \'',
        306: 'Error: ≠ digito ≠ letra ≠ espacio',
        307: 'Error: ≠ =',
        308: 'Error: ≠ &',
        309: 'Error: ≠ |',
        310: 'Error: ≠ =',
        311: 'Error: ≠ > ≠ :',
        312: 'Error: ≠ =',
        313: 'Error: ≠ < ≠ :',
        314: 'Error: ≠ =',
        315: 'Error: ≠ {',
        316: 'Error: ≠ }'
    }

    final_states = {
        200: 'Reconoce digito+',
        201: 'Reconoce digito+.digito+',
        202: 'Reconoce digito+edigito+ o digito+.digito+edigito+',
        203: 'Reconoce letra(letra|digito)*',
        204: 'Reconoce //(letters|space|digit)*//',
        205: '/*(letters|space|digit)*',
        206: "Reconoce '(letter|digit|space)*'",
        207: 'Reconoce -',
        208: 'Reconoce +',
        209: 'Reconoce *',
        210: 'Reconoce .',
        211: 'Reconoce ,',
        212: 'Reconoce ;',
        213: 'Reconoce :',
        214: 'Reconoce :=',
        215: 'Reconoce ::',
        216: 'Reconoce !',
        217: 'Reconoce !==',
        218: 'Reconoce &&',
        219: 'Reconoce ||',
        220: 'Reconoce =',
        221: 'Reconoce =:=',
        222: 'Reconoce >>',
        223: 'Reconoce >:=',
        224: 'Reconoce <<',
        225: 'Reconoce <:=',
        226: 'Reconoce (',
        227: 'Reconoce ((',
        228: 'Reconoce )',
        229: 'Reconoce ))',
        230: 'Reconoce {{',
        231: 'Reconoce }}',
        232: 'Reconoce [',
        233: 'Reconoce ]'
    }

    reserved_words = {
        'function': 1,
        'begin': 2,
        'returning': 3,
        'end': 4,
        'starting': 5,
        'if': 6,
        'elseif': 7,
        'else': 8,
        'while': 9,
        'for': 10,
        'into': 11,
        'do': 12,
        'printing': 13,
        'inputing': 14,
        'fact': 15,
        'pow': 16,
        'absolute': 17,
        'minimal': 18,
        'maximal': 19,
        'range': 20,
    }

    token_tables = []

    def read(self, file: str):
        state = 0
        current = []
        identificator_index = 1

        for i, char in enumerate(file, start=1):
            if state == 234:
                state = 0
                continue

            # Get the next state.
            next_state = self.states_table[state][3] if (state == 1 and char == 'e') or (
                state == 3 and char == 'e') else self.states_table[state][Utils.get_char_state(char)]

            current.append(char)

            print(f'{i}: from {state} to {next_state}')

            state = next_state

            if state in self.error_states:
                print(self.error_states[state])
                state = 0

            if state in self.final_states:
                word = ''.join(current)[:-1].strip()

                if state == 203:
                    if word in self.reserved_words:
                        print('Palabra reservada detectada:', word, end='\n\n')
                        self.token_tables.append({
                            "Tipo": "Palabra reservada",
                            "Token": word,
                            "Número": self.reserved_words[word]
                        })
                    else:
                        print('Identificador detectado:', word, end='\n\n')
                        self.token_tables.append({
                            "Tipo": "Identificador",
                            "Token": word,
                            "Número": identificator_index
                        })
                        identificator_index += 1

                elif state in (200, 201, 202):
                    if state == 200:
                        print('Digit+ detectado', word, end='\n\n')
                    elif state == 201:
                        print('Digit+.digit+ detectado', word, end='\n\n')
                    elif '.' in word:
                        print(
                            'Digito+.digito+edigito+ detectado', word, end='\n\n')
                    else:
                        print('Digito+edigito+ detectado', word, end='\n\n')
                else:
                    print(self.final_states[state], end='\n\n')
                    self.token_tables.append({
                        "Tipo": "Símbolo",
                        "Token": word,
                        "Número": state
                    })

                current = []
                state = 0

        print()
        print('Tabla de tokens')
        for token in self.token_tables:
            print(token)
